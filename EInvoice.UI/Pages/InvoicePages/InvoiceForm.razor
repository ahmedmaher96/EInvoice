@page "/Invoice/Form"
@page "/Invoice/Form/{InvoiceID:int?}"
@inject HttpClient Http
@inject GeneralService service

<h3>Invoice Form</h3>

<EditForm Model="@_invoice" OnValidSubmit="SendData">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
        <div class="col-lg-4 border-end border-1 border-dark">
            <div class="my-3 text-center">
                <label>
                    <strong>Date:</strong>
                </label>
                <label>
                    @_invoice.DateTimeInssured.ToString("dd MMMM-yyyy")
                </label>
                <label>
                    <strong>
                        @_invoice.DateTimeInssured.ToString("hh:mm:ss")
                    </strong>
                </label>
            </div>
            <div class="my-3">
                <InputText @bind-Value="_invoice.Code" class="form-control" placeholder="Invoice Code" />
            </div>
            <div class="my-3">
                <select @bind="_invoice.Type" class="form-select">
                    <option value="0">Select Type</option>
                    @foreach (var type in Enum.GetValues(typeof(InvoiceType)))
                    {
                        <option value="@((int)type)">@type.ToString()</option>
                    }
                </select>
            </div>
            @if (_invoice.Customer != null)
            {
                <div class="my-3">
                    <label><strong>Customer Code:</strong> @_invoice.Customer.Code</label>
                </div>
                <div class="my-3">
                    <label><strong>Customer Name:</strong> @_invoice.Customer.Name</label>
                </div>
            }
            @if (InvoiceID == null)
            {
                <div class="my-3">
                    <label><strong>Customer Name:</strong> Name</label>
                </div>
                <div class="my-3">
                    <label><strong>Customer Name:</strong> Name</label>
                </div>
            }
        </div>



        <div class="col-lg-8" style="height: 70vh;">

            <div class="text-end">
                <a class="btn btn-success bi-file-earmark-plus-fill" @onclick="ShowModal"> Add Items</a>
            </div>

            <ModalComponent IsVisible="@isModalVisible"
                            Title="Add Items"
                            OnClose="HandleModalClose">
                <AddItems InvoiceItem="@_invoiceItem"></AddItems>
            </ModalComponent>

            <div class="container mt-2 pt-2 overflow-auto" style="background-color: #F9F4F8; height: 100%;">
                @if (InvoiceID == null && _invoice.InvoiceItems == null)
                {
                    <div class="text-center">
                        <h4 class="fw-bold h2">Add Items</h4>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="well col-lg-12">
                            <div class="row">
                                <div class="col-xs-7 col-sm-7 col-md-7">
                                    <h4>
                                        <div class="w-25">
                                            <img src="CodeZone.jpg" style="width:100%;" alt="Alternate Text" />
                                        </div>
                                    </h4>
                                </div>
                                <div class="col-xs-5 col-sm-5 col-md-5 text-right">
                                    <p>
                                        <strong>Date: </strong>
                                        <em>@_invoice.DateTimeInssured.ToString("dd-MM-yyyy | hh:mm tt")</em>
                                    </p>
                                    @if (_invoice.Customer != null)
                                    {
                                        <p>
                                            <strong>Code - @_invoice.Customer.Code</strong>
                                        </p>
                                    }
                                </div>
                            </div>
                            <div class="row">
                                <div class="text-center">
                                    @if (_invoice.Code != null)
                                    {
                                        <h4>@_invoice.Code</h4>
                                    }
                                    else
                                    {
                                        <h4>Invoice</h4>
                                    }
                                </div>
                                <table class="table recieptbg">
                                    @* Invoice Head *@
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Quantity</th>
                                            <th class="text-center">Price</th>
                                            <th class="text-center">Total</th>
                                        </tr>
                                    </thead>

                                    @* Invoice Table *@
                                    <tbody>
                                        @if (_invoice.InvoiceItems != null)
                                        {
                                            @foreach (var invoiceItem in _invoice.InvoiceItems)
                                            {
                                                <tr>
                                                    <td class="col-md-9"><p><em>@(invoiceItem.ItemID)</em></p></td>
                                                    <td class="col-md-1" style="text-align: center"> @invoiceItem.Quantity </td>
                                                    <td class="col-md-1 text-center">@invoiceItem.Amount</td>
                                                    <td class="col-md-1 text-center">@invoiceItem.Total</td>
                                                </tr>
                                                @foreach (var invoiceItemTax in invoiceItem.InvoiceItemTaxes)
                                                {

                                                    <tr>
                                                        <td>   </td>
                                                        <td colspan="2" class="text-right"><p><strong>@(invoiceItemTax.TaxId)</strong></p></td>
                                                        <td class="text-center text-danger"><p><strong>@invoiceItemTax.TaxAmount</strong></p></td>
                                                    </tr>
                                                }
                                                <tr>
                                                    <td>
                                                        <button type="submit" class="btn btn-warning">
                                                            <i class="bi bi-pencil-square"></i>
                                                        </button>
                                                        <button type="submit" class="btn btn-danger">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </td>
                                                    <td colspan="2" class="text-right"><p><strong>Net Amount: </strong></p></td>
                                                    <td class="text-center text-danger"><p><strong>@invoiceItem.ItemNetAmount</strong></p></td>
                                                </tr>
                                            }
                                        }
                                        <tr>
                                            <td>   </td>
                                            <td colspan="2" class="text-right"><h4><strong>Total: </strong></h4></td>
                                            <td class="text-center text-danger"><h4><strong>@_invoice.NetAmount</strong></h4></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                }
            </div>
        </div>

    </div>

    <div class="text-start">
        @if (InvoiceID.HasValue)
        {

            <button type="submit" class="btn btn-warning">
                <i class="bi bi-arrow-repeat"></i> Update
            </button>
        }
        else
        {
            <button type="submit" class="btn btn-success">
                <i class="bi bi-file-earmark-plus-fill"></i> Save
            </button>
        }
        <button class="btn btn-info mx-2">
            <i class="bi bi-printer-fill"></i> Print
        </button>
        <NavLink href="/Invoice" class="btn btn-secondary">
            <i class="bi bi-arrow-return-right"></i> Back
        </NavLink>
    </div>
</EditForm>

@code {

    private InvoiceDTO _invoice = new InvoiceDTO();
    private List<InvoiceItemDTO> _invoiceItems = new List<InvoiceItemDTO>();
    private bool isModalVisible = false;
    private InvoiceItemDTO _invoiceItem = new InvoiceItemDTO();

    [Parameter]
    public int? InvoiceID { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (InvoiceID.HasValue)
        {
            _invoice = new InvoiceDTO();
            var response = await Http.GetAsync($"api/Invoice/Form/{InvoiceID.Value}");
            response.EnsureSuccessStatusCode();

            var responseBody = await response.Content.ReadAsStringAsync();
            _invoice = JsonSerializer.Deserialize<InvoiceDTO>(responseBody, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true,
                    ReferenceHandler = ReferenceHandler.Preserve
                })!;
            _invoiceItems = _invoice.InvoiceItems.Select(item => new InvoiceItemDTO
                {
                    ItemID = item.ItemID,
                    InvoiceItemTaxes = item.InvoiceItemTaxes.Select(tax => new InvoiceItemTaxDTO
                    {
                        TaxId = tax.TaxId,
                        TaxAmount = tax.TaxAmount,
                    }).ToList(),
                    Quantity = item.Quantity,
                    Amount = item.Amount,
                }).ToList();
        }
        else
        {
            _invoice = new InvoiceDTO()
                {
                    DateTimeInssured = DateTime.Now,
                };
        }
        StateHasChanged();
    }

    private async Task SendData()
    {
        if (InvoiceID.HasValue)
        {
            await Update();
        }
        else
        {
            _invoice.DateTimeInssured = DateTime.Now;
            await Save();
        }
        StateHasChanged();
    }

    private async Task Save()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Invoice/Form", _invoice);
            if (response.IsSuccessStatusCode)
            {
                var newInvoice = await response.Content.ReadFromJsonAsync<Invoice>();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving invoice: {ex.Message}");
        }
    }

    private async Task Update()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/Invoice/Form/{InvoiceID}", _invoice);
            if (response.IsSuccessStatusCode)
            {
                var newInvoice = await response.Content.ReadFromJsonAsync<Invoice>();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving invoice: {ex.Message}");
        }
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private async Task HandleModalClose(bool confirmed)
    {
        if (confirmed)
        {
            if (_invoice.InvoiceItems == null)
            {
                _invoice.InvoiceItems = new List<InvoiceItemDTO>()
                {
                    new InvoiceItemDTO(){

                        InvoiceItemTaxes = new List<InvoiceItemTaxDTO>()
                    },
                };
            }
            _invoice.InvoiceItems.Add(_invoiceItem);
            _invoiceItem = new InvoiceItemDTO();
            StateHasChanged();
        }
        isModalVisible = false;
    }
}


