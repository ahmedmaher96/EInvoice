@page "/Invoice/Form"
@page "/Invoice/Form/{InvoiceID:int?}"
@inject HttpClient Http
@inject GeneralService service
@inject InvoiceService invoiceService
@inject IJSRuntime JS

<h3>Invoice Form</h3>

<EditForm Model="@_invoice" OnValidSubmit="SendData">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row">

        @* Invoice Data Inputs *@

        <div class="col-lg-4 border-end border-1 border-dark">
            <div class="my-3 text-center">
                <label>
                    <strong>Date:</strong>
                </label>
                <label>
                    @_invoice.DateTimeInssured.ToString("dd MMMM-yyyy")
                </label>
                <label>
                    <strong>
                        @_invoice.DateTimeInssured.ToString("hh:mm:ss")
                    </strong>
                </label>
            </div>
            <div class="my-3">
                <InputText @bind-Value="_invoice.Code" class="form-control" placeholder="Invoice Code" />
            </div>
            <div class="my-3">
                <select @bind="_invoice.Type" class="form-select">
                    <option value="0">Select Type</option>
                    @foreach (var type in Enum.GetValues(typeof(InvoiceType)))
                    {
                        <option value="@((int)type)">@type.ToString()</option>
                    }
                </select>
            </div>
            @if (InvoiceID == null)
            {
                <div class="my-3">

                    <select @bind="_invoice.CustomerID" class="form-select">
                        <option value="0">Select Customer</option>
                        @if (_customers.Any())
                        {
                            @foreach (var customer in _customers)
                            {
                                <option value="@customer.CustomerID">@($"{customer.Code} - {customer.Name}")</option>
                            }
                        }
                    </select>

                </div>
            }
            else
            {
                <div class="my-3">
                    <label><strong>Customer Name: </strong>@_customer.Code - @_customer.Name</label>
                </div>
            }
        </div>

        @* Invoice *@

        <div class="col-lg-8" style="height: 70vh;">

            @* Add Item Modal Start*@

            <div class="text-end">
                <a class="btn btn-success bi-file-earmark-plus-fill" @onclick="ShowModal"> Add Items</a>
            </div>

            @if (isModalVisible)
            {
                <ModalComponent Title="Add Item"
                                OnClose="HandleModalClose">
                    <AddItems InvoiceItem="@_invoiceItem"></AddItems>
                </ModalComponent>
            }

            @* Add Item Modal End*@

            <div class="container mt-2 pt-2 overflow-auto" style="background-color: #F9F4F8; height: 100%;" id="printSection">
                @if (InvoiceID == null && _invoice.InvoiceItems.Count == 0)
                {
                    <div class="text-center">
                        <h4 class="fw-bold h2">No Items</h4>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="well col-lg-12">
                            <div class="row">
                                <div class="col-xs-7 col-sm-7 col-md-7">
                                    <h4>
                                        <div class="w-25">
                                            <img src="CodeZone.jpg" style="width:100%;" alt="Alternate Text" />
                                        </div>
                                    </h4>
                                </div>
                                <div class="col-xs-5 col-sm-5 col-md-5 text-right">
                                    <p>
                                        <strong>Date: </strong>
                                        <em>@_invoice.DateTimeInssured.ToString("dd-MM-yyyy | hh:mm tt")</em>
                                    </p>
                                    @if (_customer != null)
                                    {
                                        <p>
                                            <strong>@_customer.Code - @_customer.Name</strong>
                                        </p>
                                    }
                                </div>
                            </div>
                            <div class="row">
                                <div class="text-center">
                                    <h4>@(_invoice.Code ?? "Invoice Code")</h4>
                                </div>
                                <table class="table recieptbg">
                                    @* Invoice Head *@
                                    <thead>
                                        <tr>
                                            <th>Product</th>
                                            <th>Quantity</th>
                                            <th class="text-center">Price</th>
                                            <th class="text-center">Total</th>
                                        </tr>
                                    </thead>

                                    @* Invoice Table *@
                                    <tbody>
                                        @if (_invoice.InvoiceItems != null)
                                        {
                                            @foreach (var invoiceItem in _invoice.InvoiceItems)
                                            {
                                                <tr>

                                                    <td class="col-md-9">
                                                        <p>
                                                            <em>
                                                                @(_items.Where(c => c.ItemID == invoiceItem.ItemID)
                                                                    .Select(c => c.Name)
                                                                    .FirstOrDefault())
                                                            </em>
                                                        </p>
                                                    </td>
                                                    <td class="col-md-1" style="text-align: center"> @invoiceItem.Quantity </td>
                                                    <td class="col-md-1 text-center">@invoiceItem.Amount</td>
                                                    <td class="col-md-1 text-center">@invoiceItem.Total</td>
                                                </tr>
                                                @foreach (var invoiceItemTax in invoiceItem.InvoiceItemTaxes)
                                                {
                                                    <tr>
                                                        <td>   </td>
                                                        <td colspan="2" class="text-right">
                                                            <p>
                                                                <strong>
                                                                    @(_taxes.Where(c => c.TaxID == invoiceItemTax.TaxId)
                                                                        .Select(c => c.Name)
                                                                        .FirstOrDefault())
                                                                </strong>
                                                            </p>
                                                        </td>
                                                        <td class="text-center"><p><strong>@invoiceItemTax.TaxAmount</strong></p></td>
                                                    </tr>
                                                }
                                                <tr>
                                                    <td>
                                                        <a class="btn btn-warning" @onclick="()=>EditInvoiceItem(invoiceItem)">
                                                            <i class="bi bi-pencil-square"></i>
                                                        </a>
                                                        <a class="btn btn-danger" @onclick="() => RemoveRow(invoiceItem)">
                                                            <i class="bi bi-trash"></i>
                                                        </a>
                                                    </td>
                                                    <td colspan="2" class="text-right"><p><strong>Net Amount: </strong></p></td>
                                                    <td class="text-center text-danger"><p><strong>@invoiceItem.ItemNetAmount</strong></p></td>
                                                </tr>
                                            }
                                        }
                                        <tr>
                                            <td>   </td>
                                            <td colspan="2" class="text-right"><h4><strong>Total: </strong></h4></td>
                                            <td class="text-center text-danger"><h4><strong>@_invoice.NetAmount</strong></h4></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>

                    </div>
                }
            </div>
        </div>

    </div>

    @* Control Buttons *@

    <div class="text-start">
        @if (InvoiceID.HasValue)
        {

            <button type="submit" class="btn btn-warning">
                <i class="bi bi-arrow-repeat"></i> Update
            </button>
        }
        else
        {
            <button type="submit" class="btn btn-success">
                <i class="bi bi-file-earmark-plus-fill"></i> Save
            </button>
        }
        <a class="btn btn-info mx-2" @onclick="PrintInvoice">
            <i class="bi bi-printer-fill"></i> Print
        </a>
        <NavLink href="/Invoice" class="btn btn-secondary">
            <i class="bi bi-arrow-return-right"></i> Back
        </NavLink>
    </div>


</EditForm>

<script>
    function printInvoice() {
        var printContents = document.getElementById("printSection").innerHTML;
        var tempDiv = document.createElement("div");
        tempDiv.innerHTML = printContents;
        var buttons = tempDiv.querySelectorAll("button, a.btn");
        buttons.forEach(button => button.style.display = "none");
        var originalContents = document.body.innerHTML;
        document.body.innerHTML = tempDiv.innerHTML;
        window.print();
        document.body.innerHTML = originalContents;
        location.reload();
    }
</script>

@code {

    private InvoiceDTO _invoice = new InvoiceDTO();
    private List<InvoiceItemDTO> _invoiceItems = new List<InvoiceItemDTO>();
    private bool isModalVisible = false;
    private InvoiceItemDTO _invoiceItem = new InvoiceItemDTO();
    private List<Customer> _customers = new List<Customer>();
    private List<Item> _items = new List<Item>();
    private List<Tax> _taxes = new List<Tax>();
    private Customer _customer = new Customer();

    [Parameter]
    public int? InvoiceID { get; set; }

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _customers = await invoiceService.GetCustomer(null);

        if (InvoiceID.HasValue)
        {
            _invoice = new InvoiceDTO();
            _invoice = await invoiceService.GetInvoiceById(InvoiceID);
            _invoiceItems = _invoice.InvoiceItems.Select(item => new InvoiceItemDTO
                {
                    ItemID = item.ItemID,
                    InvoiceItemTaxes = item.InvoiceItemTaxes.Select(tax => new InvoiceItemTaxDTO
                    {
                        TaxId = tax.TaxId,
                        TaxAmount = tax.TaxAmount,
                    }).ToList(),
                    Quantity = item.Quantity,
                    Amount = item.Amount,
                }).ToList();
            _customer = await invoiceService.GetCustomerById(_invoice.CustomerID);
            
            await GetInvoiceItemTaxNamesById();
        }
        else
        {
            _invoice = new InvoiceDTO()
                {
                    Code = GenerateInvoiceCode(),
                    DateTimeInssured = DateTime.Now,
                };
        }
        StateHasChanged();
    }

    private async Task SendData()
    {
        if (InvoiceID.HasValue)
        {
            await Update();
        }
        else
        {
            _invoice.DateTimeInssured = DateTime.Now;
            await Save();
        }
        NavigateToItemList();
    }

    private async Task Save()
    {
        try
        {
            _invoice.Code ??= GenerateInvoiceCode();
            await invoiceService.SaveInvoice(_invoice);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving invoice: {ex.Message}");
        }
    }

    private async Task Update()
    {
        try
        {
            await invoiceService.UpdateInvoice(InvoiceID, _invoice);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving invoice: {ex.Message}");
        }
    }

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private async Task HandleModalClose(bool confirmed)
    {
        if (confirmed)
        {
            var existingItem = _invoice.InvoiceItems.FirstOrDefault(i => i.ItemID == _invoiceItem.ItemID);

            if (existingItem != null)
            {
                var index = _invoice.InvoiceItems.IndexOf(existingItem);
                _invoice.InvoiceItems[index] = _invoiceItem;
            }
            else
            {
                _invoice.InvoiceItems.Add(_invoiceItem);
            }

            await GetInvoiceItemTaxNamesById();

            _invoiceItem = new InvoiceItemDTO();
        }
        isModalVisible = false;
    }

    private void RemoveRow(InvoiceItemDTO row)
    {
        _invoice.InvoiceItems.Remove(row);
    }

    private void EditInvoiceItem(InvoiceItemDTO row)
    {
        isModalVisible = true;
        _invoiceItem = row;
    }

    private string GenerateInvoiceCode()
    {
        var random = new Random();

        string digits = random.Next(1000, 9999).ToString();

        string letters = new string(Enumerable.Range(0, 4)
            .Select(_ => (char)random.Next('A', 'Z' + 1)).ToArray());

        return $"#{digits}{letters}";
    }

    private async Task PrintInvoice()
    {
        await JS.InvokeVoidAsync("printInvoice");
    }

    private void NavigateToItemList()
    {
        NavigationManager.NavigateTo($"/Invoice");
        StateHasChanged();
    }

    private async Task GetInvoiceItemTaxNamesById()
    {
        foreach (var item in _invoice.InvoiceItems)
        {
            var _item = await invoiceService.GetItemById(item.ItemID);
            _items.Add(_item);
            foreach (var tax in item.InvoiceItemTaxes)
            {
                var _tax = await invoiceService.GetTaxById(tax.TaxId);
                _taxes.Add(_tax);
            }
        }
    }
}


