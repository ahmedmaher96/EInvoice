@page "/Item/Form"
@page "/Item/Form/{ItemID:int?}"
@inject HttpClient Http
@inject ItemService itemService

<h3>ItemsForm</h3>

<div class="container my-5">
    <EditForm Model="@_item" OnValidSubmit="SendData">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="my-3">
            <InputText @bind-Value="ItemName" class="form-control" placeholder="Item Code" />
        </div>
        <div class="my-3">
            <InputText @bind-Value="ItemCode" class="form-control" placeholder="Item Name" />
        </div>
        <div class="my-3">
            @if (ItemID.HasValue)
            {
                    <button type="submit" class="btn btn-warning">
                        <i class="bi bi-arrow-repeat"></i> Update
                    </button>
            }
            else
            {
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-file-earmark-plus-fill"></i> Save
                    </button>
            }
            <NavLink href="/Item" class="btn btn-secondary mx-2">
                <i class="bi bi-arrow-return-right"></i> Return Back
            </NavLink>
        </div>
    </EditForm>
</div>

@code {
    private ItemDTO _item = new ItemDTO();

    [Parameter]
    public int? ItemID { get; set; }
    [Parameter]
    public string ItemName { get; set; }
    [Parameter]
    public string ItemCode { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (ItemID.HasValue)
        {
            if (itemService.ItemProperty != null)
            {
                ItemCode = itemService.ItemProperty.Code;
                ItemName = itemService.ItemProperty.Name;
            }
        }
        _item.Code = ItemCode;
        _item.Name = ItemName;
    }

    private async Task SendData()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Item/Form", _item);
            if (response.IsSuccessStatusCode)
            {
                var newItem = await response.Content.ReadFromJsonAsync<ItemDTO>();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving item: {ex.Message}");
        }
    }

}
